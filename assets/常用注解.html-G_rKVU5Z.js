import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as l,c as i,f as e}from"./app-ymzqSuaY.js";const r={},h=e(`<h1 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解" aria-hidden="true">#</a> 常用注解</h1><h2 id="javaweb" tabindex="-1"><a class="header-anchor" href="#javaweb" aria-hidden="true">#</a> javaweb</h2><h3 id="webfilter" tabindex="-1"><a class="header-anchor" href="#webfilter" aria-hidden="true">#</a> @WebFilter</h3><ul><li>作用在Filter 上</li></ul><h3 id="webservlet" tabindex="-1"><a class="header-anchor" href="#webservlet" aria-hidden="true">#</a> @WebServlet</h3><ul><li>作用在Servlet 上,声明一个Servlet</li></ul><h2 id="spring" tabindex="-1"><a class="header-anchor" href="#spring" aria-hidden="true">#</a> spring</h2><h3 id="用于创建对象的" tabindex="-1"><a class="header-anchor" href="#用于创建对象的" aria-hidden="true">#</a> 用于创建对象的</h3><ul><li><p>@Component</p><ul><li>创建对象放入IOC 容器</li></ul></li><li><p>@Service</p><ul><li><p>创建对象放入IOC 容器</p><ul><li>Service 层</li></ul></li></ul></li><li><p>@Repository</p><ul><li><p>创建对象放入IOC 容器</p><ul><li>dao 层,但是dao 层使用mybatis 的话,这个注解没用</li></ul></li></ul></li><li><p>@Controller</p><ul><li><p>创建对象放入IOC 容器</p><ul><li>web 层</li></ul></li></ul></li><li><p>@Bean</p><ul><li><p>创建对象放入IOC 容器</p><ul><li>方法上,把方法的返回值放入容器</li></ul></li></ul></li></ul><h3 id="di注入对象" tabindex="-1"><a class="header-anchor" href="#di注入对象" aria-hidden="true">#</a> DI注入对象</h3><ul><li><p>@Autowired</p><ul><li>先按照类型找再按照名称找</li></ul></li><li><p>@Qualifier</p><ul><li>配合@Autowired 使用,根据名称找对象</li></ul></li><li><p>@Value</p><ul><li>从配置文件中读取配置</li></ul></li><li><p>@Resource</p><ul><li>= @Autowired + @Qualifier</li></ul></li></ul><h3 id="作用范围的注解" tabindex="-1"><a class="header-anchor" href="#作用范围的注解" aria-hidden="true">#</a> 作用范围的注解</h3><ul><li><p>@Scope</p><ul><li>singleton 单例</li><li>prototype 多例</li></ul></li></ul><h3 id="生命周期相关的注解-写在方法上" tabindex="-1"><a class="header-anchor" href="#生命周期相关的注解-写在方法上" aria-hidden="true">#</a> 生命周期相关的注解(写在方法上)</h3><ul><li>@PostConstruct: 初始化方法</li><li><pre><code> @PreDestroy  : 销毁
</code></pre></li></ul><h3 id="配置相关" tabindex="-1"><a class="header-anchor" href="#配置相关" aria-hidden="true">#</a> 配置相关</h3><ul><li><p>@ComponentScan</p><ul><li>包扫描</li></ul></li><li><p>@Configuration</p><ul><li>声明配置类</li></ul></li><li><p>@Import</p><ul><li>写在配置类上,导入其他配置文件</li></ul></li><li><p>@PropertySource</p><ul><li>加载Properties 配置文件</li></ul></li></ul><h3 id="aop" tabindex="-1"><a class="header-anchor" href="#aop" aria-hidden="true">#</a> AOP</h3><ul><li><p>@EnableAspectJAutoProxy</p><ul><li>开启AOP功能,写在配置类上</li></ul></li><li><p>@Aspect</p><ul><li>声明一个类是切面类</li></ul></li><li><p>@Pointcut</p><ul><li><p>声明切入点表达式</p><ul><li>例如: @Pointcut(&quot;execution(* com.itheima.dao.<em>.</em>(..))&quot;)</li></ul></li></ul></li><li><p>@Before</p><ul><li>前置通知</li></ul></li><li><p>@After</p><ul><li>最终通知</li></ul></li><li><p>@AfterReturning</p><ul><li>返回后通知</li></ul></li><li><p>@AfterThrowing</p><ul><li>异常通知</li></ul></li><li><p>@Around</p><ul><li>环绕通知</li></ul></li></ul><h3 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h3><ul><li><p>@EnableTransactionManagement</p><ul><li>写在配置类上,开启事务功能</li></ul></li><li><p>@Transactional</p><ul><li>开启事务,写在类或方法上</li></ul></li></ul><h2 id="springmvc" tabindex="-1"><a class="header-anchor" href="#springmvc" aria-hidden="true">#</a> springmvc</h2><h3 id="声明对象" tabindex="-1"><a class="header-anchor" href="#声明对象" aria-hidden="true">#</a> 声明对象</h3><ul><li><p>@RestController</p><ul><li>=@Controller +@ResponseBody</li></ul></li><li><p>@Controller</p><ul><li>写在类上, 声明类,放入容器</li></ul></li></ul><h3 id="生命路径及请求方式" tabindex="-1"><a class="header-anchor" href="#生命路径及请求方式" aria-hidden="true">#</a> 生命路径及请求方式</h3><ul><li>@RequestMapping(&quot;/addressBook&quot;)</li><li>@GetMapping</li><li>@PutMapping</li><li>@PostMapping</li><li>@DeleteMapping</li></ul><h3 id="返回数据" tabindex="-1"><a class="header-anchor" href="#返回数据" aria-hidden="true">#</a> 返回数据</h3><ul><li><p>@ResponseBody</p><ul><li>把返回的结果转成json</li></ul></li></ul><h3 id="请求参数接收" tabindex="-1"><a class="header-anchor" href="#请求参数接收" aria-hidden="true">#</a> 请求参数接收</h3><ul><li><p>@RequestBody</p><ul><li>当请求参数是json 时 必须使用 @RequestBody</li></ul></li><li><p>@PathVariable</p><ul><li>如果参数是通过路径传递 @PathVariable</li></ul></li><li><p>@RequestParam</p><ul><li><p>请求URL地址参数、表单参数</p><ul><li><ol><li>当字段名和参数名称不一致时 必须加</li></ol></li><li><ol start="2"><li>使用List 接受 数据 必须加</li></ol></li></ul></li></ul></li><li><p>@DateTimeFormat</p><ul><li>用于接收URL地址参数、表单参数的日期格式处理</li></ul></li><li><p>@JsonFormat</p><ul><li>用于接收JSON串里面的日期格式处理</li></ul></li></ul><h3 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h3><ul><li>@ControllerAdvice(annotations = {RestController.class, Controller.class})</li><li>@RestControllerAdvice</li><li>@ExceptionHandler</li></ul><h3 id="enablewebmvc" tabindex="-1"><a class="header-anchor" href="#enablewebmvc" aria-hidden="true">#</a> @EnableWebMvc</h3><ul><li>原生springmvc 注解,写在配置类上,开启springmvc功能, springboot 中该注解无需添加</li></ul><h2 id="springboot" tabindex="-1"><a class="header-anchor" href="#springboot" aria-hidden="true">#</a> springboot</h2><h3 id="springbootapplication" tabindex="-1"><a class="header-anchor" href="#springbootapplication" aria-hidden="true">#</a> @SpringBootApplication</h3><ul><li>写在启动类上</li></ul><h3 id="servletcomponentscan" tabindex="-1"><a class="header-anchor" href="#servletcomponentscan" aria-hidden="true">#</a> @ServletComponentScan</h3><ul><li>扫描java 原生注解</li></ul><h3 id="enabletransactionmanagement" tabindex="-1"><a class="header-anchor" href="#enabletransactionmanagement" aria-hidden="true">#</a> @EnableTransactionManagement</h3><ul><li>开启事务</li></ul><h2 id="mybatisplus" tabindex="-1"><a class="header-anchor" href="#mybatisplus" aria-hidden="true">#</a> MybatisPlus</h2><h3 id="tablename" tabindex="-1"><a class="header-anchor" href="#tablename" aria-hidden="true">#</a> @TableName</h3><ul><li>表名不一致时指定</li></ul><h3 id="tablefield" tabindex="-1"><a class="header-anchor" href="#tablefield" aria-hidden="true">#</a> @TableField</h3><ul><li>字段名不一致时指定, 或者字段自动填充时生命填充行为</li></ul><h3 id="tableid" tabindex="-1"><a class="header-anchor" href="#tableid" aria-hidden="true">#</a> @TableId</h3><ul><li>用于声明主键及主键生成策略</li></ul><h2 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis" aria-hidden="true">#</a> mybatis</h2><h3 id="mapper" tabindex="-1"><a class="header-anchor" href="#mapper" aria-hidden="true">#</a> @Mapper</h3><ul><li>写在dao 接口上,创建对象</li></ul><h3 id="mapperscan-com-itheima-mapper" tabindex="-1"><a class="header-anchor" href="#mapperscan-com-itheima-mapper" aria-hidden="true">#</a> @MapperScan(&quot;com.itheima.mapper&quot;)</h3><ul><li>扫描dao 接口所在的包,作用同@Mapper</li></ul><h3 id="param-name" tabindex="-1"><a class="header-anchor" href="#param-name" aria-hidden="true">#</a> @Param(&quot;name&quot;)</h3><ul><li>写在方法参数上,用于多参数传递,和集合传递时指定名称</li></ul><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> @Select</h3><h3 id="update" tabindex="-1"><a class="header-anchor" href="#update" aria-hidden="true">#</a> @Update</h3><h3 id="insert" tabindex="-1"><a class="header-anchor" href="#insert" aria-hidden="true">#</a> @Insert</h3><h3 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> @Delete</h3><h2 id="lombok" tabindex="-1"><a class="header-anchor" href="#lombok" aria-hidden="true">#</a> lombok</h2><h3 id="slf4j" tabindex="-1"><a class="header-anchor" href="#slf4j" aria-hidden="true">#</a> @Slf4j</h3><ul><li>日志</li></ul><h3 id="data" tabindex="-1"><a class="header-anchor" href="#data" aria-hidden="true">#</a> @Data</h3><ul><li>-set/get/toStringhashcodeeq</li></ul><h3 id="noargsconstructor" tabindex="-1"><a class="header-anchor" href="#noargsconstructor" aria-hidden="true">#</a> @NoArgsConstructor</h3><ul><li>无参构造</li></ul><h3 id="allargsconstructor" tabindex="-1"><a class="header-anchor" href="#allargsconstructor" aria-hidden="true">#</a> @AllArgsConstructor</h3><ul><li>有参构造</li></ul>`,68),t=[h];function n(d,u){return l(),i("div",null,t)}const p=a(r,[["render",n],["__file","常用注解.html.vue"]]);export{p as default};
