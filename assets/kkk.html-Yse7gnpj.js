import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as u,c as o,a as l,b as i,d as a,f as n}from"./app-sjpd2QvR.js";const h={},d=n('<h4 id="day13-事务-aop" tabindex="-1"><a class="header-anchor" href="#day13-事务-aop" aria-hidden="true">#</a> day13-事务-AOP</h4><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2><h3 id="_1-保证一组操作要么同时成功或者同时失败" tabindex="-1"><a class="header-anchor" href="#_1-保证一组操作要么同时成功或者同时失败" aria-hidden="true">#</a> 1.保证一组操作要么同时成功或者同时失败</h3><h3 id="_2-三个操作" tabindex="-1"><a class="header-anchor" href="#_2-三个操作" aria-hidden="true">#</a> 2.三个操作</h3>',4),p=l("li",null,[l("p",null,"开启事务"),l("ul",null,[l("li",null,"start transaction;")])],-1),s=l("li",null,[l("p",null,"提交事务"),l("ul",null,[l("li",null,"commit;")])],-1),c=l("li",null,[l("p",null,"回滚事务"),l("ul",null,[l("li",null,"rollback;")])],-1),_=l("p",null,"没有boot的时候",-1),b=l("br",null,null,-1),f={href:"//1.xn--3kq82hc8ap4w",target:"_blank",rel:"noopener noreferrer"},x=l("br",null,null,-1),k=l("br",null,null,-1),m=l("br",null,null,-1),E=l("br",null,null,-1),y={href:"//2.xn--3kq2bv3pxtx",target:"_blank",rel:"noopener noreferrer"},I=l("br",null,null,-1),N=l("br",null,null,-1),g={href:"//3.xn--3kq82h79dzt5a",target:"_blank",rel:"noopener noreferrer"},v=l("br",null,null,-1),A=n("<li><p>有boot的时候</p><ul><li><p>只需要挂@Transactional这个注解即可</p><ul><li><p>声明式事务, 声明个注解事务就会被管理</p></li><li><p>rollbackFor</p><ul><li>boot仅仅帮你在runtime异常回滚</li></ul></li><li><p>propagation</p><ul><li><p>事务的传播行为</p></li><li><p>REQUIRED(默认值)</p><ul><li>需要事务, 如果有加入, 没有则创建新的</li></ul></li><li><p>REQUIRES_NEW</p><ul><li>需要事务, 不管有没有都创建新的</li></ul></li></ul></li></ul></li><li><p>boot帮我们try catch</p></li></ul></li>",1),B=n('<h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><ul><li>boot只会帮我们回滚运行时异常, 我们想要回滚编译时异常需要添加rollbackFor= 异常类型, 我们告诉boot什么异常要回滚!!!!!</li></ul><h2 id="aop" tabindex="-1"><a class="header-anchor" href="#aop" aria-hidden="true">#</a> AOP</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><ul><li><p>面向切面编程;(对已经存在的代码功能进行增强控制的技术)</p></li><li><p>相关名词</p><ul><li><p>目标对象</p><ul><li>我们希望增强的类;(原来项目中已经存在的功能类)</li></ul></li><li><p>连接点</p><ul><li>目标对象中的任意一个方法都是一个连接点;</li></ul></li><li><p>切入点</p><ul><li>符合切入点表达式的连接点就是切入点;</li></ul></li><li><p>切入点表达式</p><ul><li>描述什么样的连接点有资格成为切入点的字符串表达式;</li></ul></li><li><p>通知</p><ul><li>我们新增的对目标对象中的功能进行增强的逻辑(就是我们自定义的增强逻辑的方法);</li></ul></li><li><p>切面</p><ul><li>描述切入点和通知之间的联合关系的动作就是切面;(这个是重点)</li></ul></li></ul></li></ul><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用:</h3><ul><li>可以在不改变原码的情况下对功能进行增强</li></ul><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h3><ul><li><p>基于动态代理完成的</p><ul><li><p>JDK动态代理</p><ul><li>缺点: 只能面向接口编程</li></ul></li><li><p>CGLIB代理</p><ul><li>可以面向类带来, 本质造了一个类的子类</li></ul></li></ul></li></ul><h3 id="切面" tabindex="-1"><a class="header-anchor" href="#切面" aria-hidden="true">#</a> 切面</h3><ul><li><p>@Asepct注解标注是一个切面类</p></li><li><p>通知的类型</p><ul><li>虽然有很多, 但是最后只用一个@Around</li></ul></li><li><p>切点表达式</p><ul><li><p>execution</p><ul><li><p>..</p><ul><li>匹配任意层级或者任意个数的内容</li></ul></li><li><ul><li></li></ul><ul><li>匹配单个目录, 类, 方法, 单个参数</li></ul></li><li><p>习惯</p><ul><li>包结构慎用..</li><li>尽量给接口添加aop</li><li>读表达式从右往左读</li></ul></li></ul></li><li><p>@annotation</p><ul><li>1: 自定义一个注解</li><li>2: 描述带有指定注解的方法可以作为切入点</li></ul></li><li><p>对比</p><ul><li>execution 的通用性更强,可以做到,写1次,匹配多个方法;</li><li>annotation 可以精确到具体的某个方法,如果方法之间没有规律,或需要增强的方法数量较少,可以采用这种方式;</li></ul></li></ul></li></ul><h3 id="练习" tabindex="-1"><a class="header-anchor" href="#练习" aria-hidden="true">#</a> 练习</h3><ul><li>1.思考如何对所有请求参数进行去除前后空格</li><li><ol start="2"><li>统计业务层每个方法执行的时间</li></ol></li><li>3: 完成课堂的解散部门的日志记录功能和最后的操作记录功能;</li></ul>',13);function R(V,q){const e=t("ExternalLinkIcon");return u(),o("div",null,[d,l("ul",null,[p,s,c,l("li",null,[_,l("ul",null,[l("li",null,[i("try{"),b,l("a",f,[i("//1.开启事务"),a(e)]),x,i(" 操作1;"),k,i(" 操作2;"),m,i(" ...."),E,l("a",y,[i("//2.提交事务"),a(e)]),I,i(" }catch(Exception e){"),N,l("a",g,[i("//3.回滚事务"),a(e)]),v,i(" }")])])]),A]),B])}const D=r(h,[["render",R],["__file","kkk.html.vue"]]);export{D as default};
