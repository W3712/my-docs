import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as l,c as i,f as a}from"./app-KUBQLNXc.js";const r={},s=a(`<h1 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> redis</h1><h2 id="redis是什么" tabindex="-1"><a class="header-anchor" href="#redis是什么" aria-hidden="true">#</a> redis是什么</h2><h3 id="redis是一个基于内存的key-value的nosql数据库" tabindex="-1"><a class="header-anchor" href="#redis是一个基于内存的key-value的nosql数据库" aria-hidden="true">#</a> Redis是一个基于内存的key-value的nosql数据库</h3><h2 id="redis-value的五种数据格式" tabindex="-1"><a class="header-anchor" href="#redis-value的五种数据格式" aria-hidden="true">#</a> redis Value的五种数据格式</h2><h3 id="字符串-string-类似java中的字符串" tabindex="-1"><a class="header-anchor" href="#字符串-string-类似java中的字符串" aria-hidden="true">#</a> 字符串 string 类似java中的字符串</h3><h3 id="哈希-hash-类似java中的对象" tabindex="-1"><a class="header-anchor" href="#哈希-hash-类似java中的对象" aria-hidden="true">#</a> 哈希 hash 类似java中的对象</h3><h3 id="列表-list" tabindex="-1"><a class="header-anchor" href="#列表-list" aria-hidden="true">#</a> 列表 list</h3><ul><li>有序,可以重复,类似java中的ArrayList</li></ul><h3 id="集合-set" tabindex="-1"><a class="header-anchor" href="#集合-set" aria-hidden="true">#</a> 集合 set</h3><ul><li>无序,不能重复,类似java中的HashSet</li></ul><h3 id="有序集合-zset-不-能重复-并且按照分数排序" tabindex="-1"><a class="header-anchor" href="#有序集合-zset-不-能重复-并且按照分数排序" aria-hidden="true">#</a> 有序集合 zset 不 能重复,并且按照分数排序</h3><h2 id="redis的操作命令" tabindex="-1"><a class="header-anchor" href="#redis的操作命令" aria-hidden="true">#</a> redis的操作命令</h2><h3 id="字符串-string" tabindex="-1"><a class="header-anchor" href="#字符串-string" aria-hidden="true">#</a> 字符串 string</h3><ul><li><ul><li>SET key value 设置指定key的值</li></ul></li><li><ul><li>GET key 获取指定key的值</li></ul></li><li><ul><li>SETEX key seconds value 设置指定key的值，并将 key 的过期时间设为 seconds 秒</li></ul></li><li><ul><li>SETNX key value 只有在 key 不存在时设置 key 的值</li></ul></li></ul><h3 id="哈希-hash" tabindex="-1"><a class="header-anchor" href="#哈希-hash" aria-hidden="true">#</a> 哈希 hash</h3><ul><li><ul><li>HSET key field value 将哈希表 key 中的字段 field 的值设为 value</li></ul></li><li><ul><li>HGET key field 获取存储在哈希表中指定字段的值</li></ul></li><li><ul><li>HDEL key field 删除存储在哈希表中的指定字段</li></ul></li><li><ul><li>HKEYS key 获取哈希表中所有字段</li></ul></li><li><ul><li>HVALS key 获取哈希表中所有值</li></ul></li></ul><h3 id="列表-list-1" tabindex="-1"><a class="header-anchor" href="#列表-list-1" aria-hidden="true">#</a> 列表 list</h3><ul><li><ul><li>LPUSH key value1 [value2] 将一个或多个值插入到列表头部</li></ul></li><li><ul><li>LRANGE key start stop 获取列表指定范围内的元素</li></ul></li><li><ul><li>RPOP key 移除并获取列表最后一个元素</li></ul></li><li><ul><li>LLEN key 获取列表长度</li></ul></li><li><ul><li>BRPOP key1 [key2 ] timeout 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</li></ul></li></ul><h3 id="集合-set-1" tabindex="-1"><a class="header-anchor" href="#集合-set-1" aria-hidden="true">#</a> 集合 set</h3><ul><li><ul><li>SADD key member1 [member2] 向集合添加一个或多个成员</li></ul></li><li><ul><li>SMEMBERS key 返回集合中的所有成员</li></ul></li><li><ul><li>SCARD key 获取集合的成员数</li></ul></li><li><ul><li>SINTER key1 [key2] 返回给定所有集合的交集</li></ul></li><li><ul><li>SUNION key1 [key2] 返回所有给定集合的并集</li></ul></li><li><ul><li>SREM key member1 [member2] 移除集合中一个或多个成员</li></ul></li></ul><h3 id="有序集合-zset" tabindex="-1"><a class="header-anchor" href="#有序集合-zset" aria-hidden="true">#</a> 有序集合 zset</h3><ul><li><ul><li>ZADD key score1 member1 [score2 member2] 向有序集合添加一个或多个成员</li></ul></li><li><ul><li>ZRANGE key start stop [WITHSCORES] 通过索引区间返回有序集合中指定区间内的成员</li></ul></li><li><ul><li>ZINCRBY key increment member 有序集合中对指定成员的分数加上增量 increment</li></ul></li><li><ul><li>ZREM key member [member ...] 移除有序集合中的一个或多个成员</li></ul></li></ul><h2 id="spring-data-redis" tabindex="-1"><a class="header-anchor" href="#spring-data-redis" aria-hidden="true">#</a> Spring Data Redis</h2><h3 id="spring-data-redis的五种操作类" tabindex="-1"><a class="header-anchor" href="#spring-data-redis的五种操作类" aria-hidden="true">#</a> Spring Data Redis的五种操作类</h3><ul><li><ul><li>ValueOperations：string数据操作</li></ul></li><li><ul><li>SetOperations：set类型数据操作</li></ul></li><li><ul><li>ZSetOperations：zset类型数据操作</li></ul></li><li><ul><li>HashOperations：hash类型的数据操作</li></ul></li><li><ul><li>ListOperations：list类型的数据操作</li></ul></li></ul><h3 id="string-操作方法" tabindex="-1"><a class="header-anchor" href="#string-操作方法" aria-hidden="true">#</a> String 操作方法</h3><ul><li></li></ul><p>redisTemplate.opsForValue().set(key, value)</p><pre><code>-  设置当前的 key 以及 value 值并且设置过期时间
</code></pre><ul><li></li></ul><p>redisTemplate.opsForValue().set(key, value, timeout, unit)</p><pre><code>-  设置当前的 key 以及 value 值并且设置过期时间
</code></pre><ul><li></li></ul><p>redisTemplate.opsForValue().get(key)</p><pre><code>- 获取当前key的 value 值
</code></pre><ul><li><p>redisTemplate.opsForValue().setIfAbsent(key, value)</p><ul><li>重新设置 key 对应的值，如果存在则设置失败</li></ul></li></ul><h3 id="hash-操作方法" tabindex="-1"><a class="header-anchor" href="#hash-操作方法" aria-hidden="true">#</a> Hash 操作方法</h3><ul><li><p>redisTemplate.opsForHash().get(key, field)</p><ul><li>获取变量中的指定 map 键是否有值，如果存在该 map 键则获取值，没有则返回 null</li></ul></li><li><p>redisTemplate.opsForHash().put(key, hashKey, value)</p><ul><li>新增 hashMap 值</li></ul></li><li><p>redisTemplate.opsForHash().keys(key)</p><ul><li>获取所有 hash 表中字段</li></ul></li><li><p>redisTemplate.opsForHash().values(key)</p><ul><li>获取 hash 表中存在的所有的值</li></ul></li></ul><h3 id="list-操作方法" tabindex="-1"><a class="header-anchor" href="#list-操作方法" aria-hidden="true">#</a> List 操作方法</h3><ul><li><p>redisTemplate.opsForList().leftPush(key, value)</p><ul><li>存储在 list 的头部，即添加一个就把它放在最前面的索引处</li></ul></li><li><p>redisTemplate.opsForList().leftPushAll(key, value)</p><ul><li>把多个值存入 List 中(value 可以是多个值，也可以是一个 Collection value)</li></ul></li><li><p>redisTemplate.opsForList().range(key, start, end)</p><ul><li>获取列表指定范围内的元素(start 开始位置, 0 是开始位置，end 结束位置, -1返回所有)</li></ul></li><li><p>redisTemplate.opsForList().size(key)</p><ul><li>获取当前 key 的 List 列表长度</li></ul></li><li></li></ul><p>redisTemplate.opsForList().rightPop(key)</p><pre><code>- 移除并获取列表最后一个元素
</code></pre><h3 id="set-操作方法" tabindex="-1"><a class="header-anchor" href="#set-操作方法" aria-hidden="true">#</a> Set 操作方法</h3><ul><li><p>redisTemplate.opsForSet().add(key, values)</p><ul><li>添加元素</li></ul></li><li><p>redisTemplate.opsForSet().members(key)</p><ul><li>获取集合中的所有元素</li></ul></li><li><p>redisTemplate.opsForSet().size(key)</p><ul><li>获取集合的大小</li></ul></li><li><p>redisTemplate.opsForSet().intersect(key, otherKeys)</p><ul><li>获取多个集合的交集</li></ul></li><li><p>redisTemplate.opsForSet().union(key, otherKeys)</p><ul><li>获取多个集合的并集</li></ul></li><li><p>redisTemplate.opsForSet().remove(key, values)</p><ul><li>移除元素(单个值、多个值)</li></ul></li></ul><h3 id="zset-操作方法" tabindex="-1"><a class="header-anchor" href="#zset-操作方法" aria-hidden="true">#</a> Zset 操作方法</h3><ul><li><p>redisTemplate.opsForZSet().add(key, value, score)</p><ul><li>添加元素</li></ul></li><li><p>redisTemplate.opsForZSet().incrementScore(key, value, delta)</p><ul><li>增加元素的 score 值，并返回增加后的值</li></ul></li><li><p>redisTemplate.opsForZSet().range(key, start,end)</p><ul><li>获取集合中给定区间的元素(start 开始位置，end 结束位置, -1 查询所有)</li></ul></li><li><p>redisTemplate.opsForZSet().remove(key, values)</p><ul><li>删除对应的 value，value 可以为多个值</li></ul></li></ul>`,46),t=[s];function u(d,h){return l(),i("div",null,t)}const o=e(r,[["render",u],["__file","redis相关.html.vue"]]);export{o as default};
